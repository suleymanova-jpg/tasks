def unique_paths_with_obstacles(obstacleGrid):
    rows, cols = len(obstacleGrid), len(obstacleGrid[0])
    
    # Əgər başlanğıc və ya son nöqtə maneədirsə, 0 qaytarırıq
    if obstacleGrid[0][0] == 1 or obstacleGrid[rows-1][cols-1] == 1:
        return 0
    
    # Dinamik proqramlaşdırma üçün DP matrisi
    dp = [[0] * cols for _ in range(rows)]
    dp[0][0] = 1  # Başlanğıc nöqtə
    
    # İlk sətir üçün yolları hesablayırıq
    for j in range(1, cols):
        if obstacleGrid[0][j] == 0:
            dp[0][j] = dp[0][j-1]
    
    # İlk sütun üçün yolları hesablayırıq
    for i in range(1, rows):
        if obstacleGrid[i][0] == 0:
            dp[i][0] = dp[i-1][0]
    
    # DP matrisi doldurulur (yuxarı və soldan gələn dəyərləri əlavə edirik)
    for i in range(1, rows):
        for j in range(1, cols):
            if obstacleGrid[i][j] == 0:
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
    
    return dp[-1][-1]  # Son nöqtəyə çatan yolların sayı

# Test nümunələri
print(unique_paths_with_obstacles([[1, 1, 1], [1, 0, 1], [1, 1, 2]]))  # Output: 0
print(unique_paths_with_obstacles([[1, 0], [1, 1]]))  # Output: 0
print(unique_paths_with_obstacles([[1, 1], [0, 0], [0, 0]]))  # Output: 0
